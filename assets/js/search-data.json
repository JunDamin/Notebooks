{
  
    
        "post0": {
            "title": "JAX를 써봅시다",
            "content": "설치를 할 때 먼저 jaxlib을 설치하고 그 버전에 맞는 jax를 설치합니다. . ! pip install jaxlib ! pip install jax==0.3.15 . from jax import numpy as jnp from jax import grad import numpy as np from plotnine import * import pandas as pd from tqdm.notebook import tqdm . 간단한 모형을 만들어 봅니다. X와 y가 2차함수 형태로 결합된 경우를 생각해 봅니다. . n = 100 X = np.random.uniform(0, 3, size=n) y = 3 * np.power(X, 2) + np.random.normal(10, 3, size=n) data = pd.DataFrame(zip(X, y), columns=[&quot;X&quot;, &quot;y&quot;]) ( ggplot(data) + aes(&quot;X&quot;, &quot;y&quot;) + geom_point() ) . &lt;ggplot: (8774572077629)&gt; . 선형 모델을 먼저 생각해 봅니다. . w = {&quot;a&quot;: 0., &quot;b&quot;: 0.} # set model def model(w, X): return w[&quot;a&quot;] * X + w[&quot;b&quot;] # set loss def loss(w, model, X, y): return jnp.power(model(w, X) - y, 2).sum() # grad loss dloss = grad(loss) . 이제 경사하강법을 활용하여 w를 찾아봅니다. . rate = 0.0001 losses = [] ws = [] for i in tqdm(range(2000)): l = loss(w, model, X, y) if i % 10 == 0: ws.append(w) losses.append(l) print(i, &quot;loss: &quot;, l) dw = dloss(w, model, X, y) for key in w.keys(): w[key] -= dw[key]*rate . 0 loss: 41636.906 10 loss: 9994.005 20 loss: 3184.5598 30 loss: 1718.3843 40 loss: 1401.9453 50 loss: 1332.9521 60 loss: 1317.2627 70 loss: 1313.1007 80 loss: 1311.4736 90 loss: 1310.4424 100 loss: 1309.5869 110 loss: 1308.8129 120 loss: 1308.0975 130 loss: 1307.4329 140 loss: 1306.8143 150 loss: 1306.239 160 loss: 1305.7032 170 loss: 1305.2048 180 loss: 1304.7411 190 loss: 1304.3093 200 loss: 1303.9078 210 loss: 1303.5338 220 loss: 1303.1858 230 loss: 1302.862 240 loss: 1302.5607 250 loss: 1302.2803 260 loss: 1302.0192 270 loss: 1301.7764 280 loss: 1301.5503 290 loss: 1301.3398 300 loss: 1301.144 310 loss: 1300.9618 320 loss: 1300.7922 330 loss: 1300.6344 340 loss: 1300.4875 350 loss: 1300.351 360 loss: 1300.2236 370 loss: 1300.1053 380 loss: 1299.995 390 loss: 1299.8926 400 loss: 1299.7971 410 loss: 1299.7083 420 loss: 1299.6256 430 loss: 1299.5488 440 loss: 1299.477 450 loss: 1299.4106 460 loss: 1299.3485 470 loss: 1299.2909 480 loss: 1299.237 490 loss: 1299.1873 500 loss: 1299.1406 510 loss: 1299.0974 520 loss: 1299.0571 530 loss: 1299.0197 540 loss: 1298.9847 550 loss: 1298.9523 560 loss: 1298.9221 570 loss: 1298.8939 580 loss: 1298.8678 590 loss: 1298.8435 600 loss: 1298.8208 610 loss: 1298.7997 620 loss: 1298.78 630 loss: 1298.7617 640 loss: 1298.7448 650 loss: 1298.7288 660 loss: 1298.7141 670 loss: 1298.7004 680 loss: 1298.6876 690 loss: 1298.6759 700 loss: 1298.6648 710 loss: 1298.6545 720 loss: 1298.645 730 loss: 1298.636 740 loss: 1298.6278 750 loss: 1298.6201 760 loss: 1298.613 770 loss: 1298.6062 780 loss: 1298.6001 790 loss: 1298.5942 800 loss: 1298.5889 810 loss: 1298.5837 820 loss: 1298.5791 830 loss: 1298.5748 840 loss: 1298.5708 850 loss: 1298.5669 860 loss: 1298.5636 870 loss: 1298.5604 880 loss: 1298.5573 890 loss: 1298.5544 900 loss: 1298.5519 910 loss: 1298.5493 920 loss: 1298.5471 930 loss: 1298.5449 940 loss: 1298.543 950 loss: 1298.541 960 loss: 1298.5394 970 loss: 1298.5378 980 loss: 1298.5364 990 loss: 1298.5352 1000 loss: 1298.5338 1010 loss: 1298.5326 1020 loss: 1298.5315 1030 loss: 1298.5303 1040 loss: 1298.5295 1050 loss: 1298.5286 1060 loss: 1298.5276 1070 loss: 1298.527 1080 loss: 1298.5264 1090 loss: 1298.5256 1100 loss: 1298.5249 1110 loss: 1298.5244 1120 loss: 1298.5239 1130 loss: 1298.5232 1140 loss: 1298.5228 1150 loss: 1298.5225 1160 loss: 1298.5221 1170 loss: 1298.5216 1180 loss: 1298.5212 1190 loss: 1298.5209 1200 loss: 1298.5208 1210 loss: 1298.5203 1220 loss: 1298.5203 1230 loss: 1298.52 1240 loss: 1298.5197 1250 loss: 1298.5195 1260 loss: 1298.5193 1270 loss: 1298.5193 1280 loss: 1298.5188 1290 loss: 1298.5188 1300 loss: 1298.5186 1310 loss: 1298.5184 1320 loss: 1298.5183 1330 loss: 1298.5182 1340 loss: 1298.5181 1350 loss: 1298.5181 1360 loss: 1298.5178 1370 loss: 1298.5178 1380 loss: 1298.5177 1390 loss: 1298.5176 1400 loss: 1298.5176 1410 loss: 1298.5175 1420 loss: 1298.5175 1430 loss: 1298.5175 1440 loss: 1298.5173 1450 loss: 1298.5173 1460 loss: 1298.5171 1470 loss: 1298.5171 1480 loss: 1298.5171 1490 loss: 1298.5171 1500 loss: 1298.5171 1510 loss: 1298.5171 1520 loss: 1298.5171 1530 loss: 1298.5168 1540 loss: 1298.5171 1550 loss: 1298.5168 1560 loss: 1298.517 1570 loss: 1298.5168 1580 loss: 1298.5168 1590 loss: 1298.5168 1600 loss: 1298.5168 1610 loss: 1298.5168 1620 loss: 1298.5168 1630 loss: 1298.5166 1640 loss: 1298.5167 1650 loss: 1298.5167 1660 loss: 1298.5168 1670 loss: 1298.5168 1680 loss: 1298.5166 1690 loss: 1298.5166 1700 loss: 1298.5168 1710 loss: 1298.5167 1720 loss: 1298.5166 1730 loss: 1298.5166 1740 loss: 1298.5166 1750 loss: 1298.5167 1760 loss: 1298.5166 1770 loss: 1298.5166 1780 loss: 1298.5167 1790 loss: 1298.5167 1800 loss: 1298.5167 1810 loss: 1298.5166 1820 loss: 1298.5167 1830 loss: 1298.5166 1840 loss: 1298.5166 1850 loss: 1298.5166 1860 loss: 1298.5166 1870 loss: 1298.5167 1880 loss: 1298.5166 1890 loss: 1298.5166 1900 loss: 1298.5166 1910 loss: 1298.5166 1920 loss: 1298.5166 1930 loss: 1298.5166 1940 loss: 1298.5166 1950 loss: 1298.5167 1960 loss: 1298.5167 1970 loss: 1298.5166 1980 loss: 1298.5166 1990 loss: 1298.5166 . result_df = pd.DataFrame(zip(X, np.array(model(w, X))), columns=[&quot;X&quot;, &quot;f&quot;]) ( ggplot(data=data) + aes(&quot;X&quot;, &quot;y&quot;) + geom_point() + geom_smooth(method=&quot;lm&quot;) + geom_line(data=result_df, mapping=aes(&quot;X&quot;, &quot;f&quot;), color=&quot;#ff1234&quot;) ) . &lt;ggplot: (8774442296935)&gt; . def plot(w):# overlay plots result_df = pd.DataFrame(zip(X, np.array(model(w, X))), columns=[&quot;X&quot;, &quot;f&quot;]) p = ( ggplot(data=data) + aes(&quot;X&quot;, &quot;y&quot;) + geom_point() + geom_smooth(method=&quot;lm&quot;) + geom_line(data=result_df, mapping=aes(&quot;X&quot;, &quot;f&quot;), color=&quot;#ff1234&quot;) ) return p . from plotnine.animation import PlotnineAnimation # for animation in the notebook from matplotlib import rc rc(&#39;animation&#39;, html=&#39;html5&#39;) plots = (plot(w) for w in ws) ani = PlotnineAnimation(plots, interval=100, repeat_delay=500) . ani.save(&quot;ghtop_images/sgd.gif&quot;) . WARNING:matplotlib.animation:MovieWriter ffmpeg unavailable; using Pillow instead. .",
            "url": "https://jundamin.github.io/Notebooks/2022/08/30/jax%EB%A1%9C-regression%EC%9D%84-%EA%B5%AC%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4.html",
            "relUrl": "/2022/08/30/jax%EB%A1%9C-regression%EC%9D%84-%EA%B5%AC%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Julia로 행성의 겉보기 역행운동을 그려보자",
            "content": "&#50669;&#54665;&#50868;&#46041;&#51060;&#46976; ? . 유튜브를 보는 도중에 행성의 겉보기 역행 운동에 대한 영상을 보았다. 행성의 역행운동이란 지구에서 보기에 행성이 반대방향으로 움직이는 것처럼 보이는 현상이다. 행성은 태양을 중심으로 돌고 있지만, 행성 간의 공전 속도의 차이로 뒤로 움직이는 듯이 보이는 현상을 말한다. . . 행성이 있고 보이는 각이 어떻게 바뀌는지를 시뮬레이션을 해보고자 하는데 줄리아에서 애니메이션을 만들 때 사용할 수 있는 Javis를 사용해서 그려보기로 한다. . &#49324;&#51204;&#51456;&#48708; . 줄리아를 설치했다고 가정한다. . 우선 패키지를 설치해야 하는데 줄리아 REPL에서 ]으로 패키지 매니저 모드로 들어간 후 add Javis를 입력하여 처리하거나 . 아래와 같이 Pkg 모듈을 불러와서 설치해야 한다. (몇 분 정도 소요 될 수 있다.) . using Pkg Pkg.add(&quot;Javis&quot;) . 패키지를 설치했으면 그다음은 패키지를 불러와야 한다. . using Javis . &#50669;&#54665;&#50868;&#46041;&#51012; &#44396;&#54616;&#44592; &#50948;&#54620; &#54632;&#49688; . 애니메이션을 만들기 위해서 아래와 같이 함수를 정의했다. . ground : 배경을 설정하는 함수이다. | object : 25 픽셀 정도 되는 원을 그리는 함수다. | path! : 경로에 점을 찍어두는 함수다. | connector : 두 점을 지나는 선을 긋는 하수다. | extender : 안쪽 행성에서 바깥쪽 행성이 어디에 보여지를 그리는 함수다. | abs : 두 Point간의 거리를 구하는 함수이다. | getpoint : 특정 지점을 지나는 백터가 원과 접하는 점을 구하는 함수다. | . function ground(args...) background(&quot;white&quot;) # canvas background sethue(&quot;black&quot;) # pen color end function object(p=O, color=&quot;black&quot;) sethue(color) circle(p, 25, :fill) return p end function path!(points, pos, color) sethue(color) push!(points, pos) # add pos to points circle.(points, 2, :fill) # draws a circle for each point using broadcasting end function connector(p1, p2, color) sethue(color) line(p1,p2, :stroke) end function extender(points, p1, p2, r, color) sethue(color) d = p2 - p1 p3 = getpoint(p2, d, r, O) line(p1, p3, :stroke) circle(p3, 2, :fill) push!(points, p3) if length(points) &gt; 200 popat!(points, 1) end circle.(points, 2, :fill) end import Base.abs function abs(p::Point, p0::Point) d = p - p0 r = sqrt(d.x^2 + d.y^2) return r end function getpoint(p, d, r, p0) λ = 0.001 rate = 0.001 new_p = p while true new_p = p + λ * d if r &lt; abs(new_p, p0) break end λ += rate end return new_p end . getpoint (generic function with 1 method) . &#44536;&#47548;&#51012; &#44536;&#47536;&#45796; . 우선 캔버스를 그린 후 붉은 행성과 파란 행성이 돌고 있다고 가정한다. . n = 1000 myvideo = Video(2000, 2000) Background(1:n, ground) path_of_red = Point[] path_of_blue = Point[] red_ball = Object(1:n, (args...)-&gt;object(O, &quot;#ff2211&quot;), Point(100,0)) act!(red_ball, Action(anim_rotate_around(24π, O))) blue_ball = Object(1:n, (args...)-&gt;object(O, &quot;#1122ff&quot;), Point(200,0)) act!(blue_ball, Action(anim_rotate_around(7π, O))) Object(1:n, (args...)-&gt;connector(pos(red_ball), pos(blue_ball), &quot;black&quot;)) Object(1:n, (args...)-&gt;path!(path_of_red, pos(red_ball), &quot;red&quot;)) Object(1:n, (args...)-&gt;path!(path_of_blue, pos(blue_ball), &quot;blue&quot;)) points = [] Object(1:n, (args...)-&gt;extender(points, pos(red_ball), pos(blue_ball), 800, &quot;#112233&quot;)) render( myvideo; pathname=&quot;ghtop_images/retrograde_motion.gif&quot; ) . Rendering frames...100%|████████████████████████████████| Time: 0:02:19 . &#34;ghtop_images/retrograde_motion.gif&#34; . 그림을 그려보면 아래와 같이 결과가 나온다. . 보면 알 수 있듯이 내행성이 외행성을 빠르게 통과할 때 행성이 뒤로 가는 것처럼 보이게 된다. . .",
            "url": "https://jundamin.github.io/Notebooks/2022/02/02/%EC%97%AD%ED%96%89%EC%9A%B4%EB%8F%99.html",
            "relUrl": "/2022/02/02/%EC%97%AD%ED%96%89%EC%9A%B4%EB%8F%99.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "오프라인에서 패키지 설치하기",
            "content": "인터넷이 연될되지 않은 상황에서 파이썬 패키지를 설치하고자 할 때 알아두어야 할 것을 정리해 보고자 한다. . 패키지를 받는다. pypi에서 whl 하나를 받을 순 있긴 한데 관련된 패키지가 없으면 결국 작동이 안된다. | pip download 형식으로 작성하면 된다. | 단 운영하고자 하는 OS에서 가동이 가능한 파일을 받아야 한다. | . | 패키지 파일을 옮긴다. 패키지 파일을 설치하고자 하는 컴퓨터로 옮겨야 한다. | 이 부분은 망분리 방식에 따라 다르기 때문에 별도로 다루진 않는다. | . | pip에서 링크 옵션을 지정해서 할 수 있다. --no-index옵션과 --find-links옵션을 쓰면 설치할 수 있다. | . | 패키지 중에서 API wrapper형식으로 된 경우 해당 소프트웨어를 설치해야 한다. altair를 쓰고자 하면 vega를 설치해야 한다. | . | 예시 . pip install --no-index --find-links {패키지가 있는 경로} {설치할 패키지} .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/23/%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/12/23/%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "date": " • Dec 23, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Pycaret 사용해 보기",
            "content": "pycaret? . Pycaret은 로우코드 머신러닝 라이브러리라고 합니다. . sk-learn과 같은 머신러닝 패키지와의 가장 큰 차이점은 타깃을 하고 있는 부분이 모델이 아니라 머신러닝 프로세스라는 점입니다. . 보통 머신러닝 라이브러리는 새로운 알고리즘이나 방식을 쉽게 적용할 수 있게 만듭니다. sk-learn을 보시면 쉽게 이해할 수 있겠지만, 모델을 정의하고 데이터를 넣고 모델의 성능을 확인할 수 있습니다. . 하지만 보통 우리가 하고자 하는 것은 특정 모델을 만드는 것이 아니라 모델의 성능을 비교하고 적용하는 것입니다. . Pycaret은 바로 이 부분, 모델을 비교하고 그것을 배포하는 것을 자동화 하는 라이브러리라고 보시면 됩니다. .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/08/pycaret.html",
            "relUrl": "/2021/12/08/pycaret.html",
            "date": " • Dec 8, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages로 블로그 시작하기",
            "content": "&#49884;&#51089;&#54616;&#44172; &#46108; &#51060;&#50976; . Jupyter notebook으로 글을 쓰곤 하는데 이를 가공하지 않고 올릴 수 있는 곳을 찾고 있었다. . 그러다가 Fastpages를 알게 되어 시작하고자 한다. . &#49444;&#52824;&#54616;&#44592; . 아직 초보라서 그렇겠지만, 기존 가이드를 기반으로 하려고 한다. . &#47112;&#54252;&#51648;&#53664;&#47532; &#49373;&#49457;&#54616;&#44592; . &#53412; &#49373;&#49457;&#54616;&#44592; . 주의할 점은 merge하기 전에 키 설정을 해야 한다. 안 그러면 에러가 나더라. . SSH_DEPLOY_KEY라는 이름은 필수다. . &#51060;&#51228; &#54168;&#51060;&#51648; &#48320;&#44221;&#54616;&#44592; . 로고는 index.html 제목이란 footer에서 써있는 건 _config.yml . 아티클이랑은 _notebooks, _posts(md), _word에 yyyy-mm-dd_파일명. 형식으로 해야한다. . &#44544;&#50424; &#46412; &#52280;&#44256;&#54624; &#47564;&#54620; &#47928;&#48277; . 기본적으로는 Markdown문법을 따르는데 추가적으로 참고할 만한 것들이 있어 정리해 보고자 한다. . 여기서 참고20 했습니다. . 여기서 참고20 했습니다. . . 처럼 된다. .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/07/fastpages.html",
            "relUrl": "/2021/12/07/fastpages.html",
            "date": " • Dec 7, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "이 블로그는 fastpages 1로 만들어졌습니다. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jundamin.github.io/Notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jundamin.github.io/Notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}