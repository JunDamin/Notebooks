{
  
    
        "post0": {
            "title": "Test",
            "content": "test . ::: {.cell execution_count=”1”} {.python .cell-code} import pandas as pd . print(pd) . ::: {.cell-output .cell-output-stdout} &lt;module &#39;pandas&#39; from &#39;/usr/local/lib/python3.8/dist-packages/pandas/__init__.py&#39;&gt; ::: ::: {julia} a = 1 println(a) .",
            "url": "https://jundamin.github.io/Notebooks/2022/09/13/test.html",
            "relUrl": "/2022/09/13/test.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "쳅터 5. 연계",
            "content": "using Pkg Pkg.add([&quot;CSV&quot;, &quot;DataFrames&quot;, &quot;Turing&quot;,&quot;Logging&quot;, &quot;StatisticalRethinking&quot;, &quot;StatisticalRethinkingPlots&quot;, &quot;StatsBase&quot;, &quot;Random&quot;, &quot;LaTeXStrings&quot;, &quot;StatsPlots&quot;, &quot;Dagitty&quot;]) . Resolving package versions... No Changes to `~/.julia/environments/v1.8/Project.toml` No Changes to `~/.julia/environments/v1.8/Manifest.toml` . 필요한 패키지를 불러옵니다 . using CSV using DataFrames using Turing using Logging using StatisticalRethinking using StatisticalRethinking: link # import explicitly, because Turing has link method also using StatisticalRethinkingPlots using StatsBase using Random using LaTeXStrings using StatsPlots using Dagitty default(label=false) Logging.disable_logging(Logging.Warn); . data &#48520;&#47084;&#50724;&#44592; . 줄리아에서 자료를 불러옵니다. . url = &quot;https://raw.githubusercontent.com/StatisticalRethinkingJulia/SR2TuringJupyter.jl/main/data/WaffleDivorce.csv&quot; data = DataFrame(CSV.File(download(url))) data[!,:D] = standardize(ZScoreTransform, data.Divorce) data[!,:M] = standardize(ZScoreTransform, data.Marriage) data[!,:A] = standardize(ZScoreTransform, data.MedianAgeMarriage); . 결혼 연령의 중간값의 표준편차는 아래와 같습니다. . println(&quot;standard deviation of median age is $(std(data.MedianAgeMarriage))&quot;) . standard deviation of median age is 1.2436303013880823 . 데이터를 생성해 봅니다. 먼저 모델을 정의합니다. . Random.seed!(100) @model function model_m5_1(A, D) σ ~ Exponential(1) # how to change unicode sigma? a ~ Normal(0, 0.2) bA ~ Normal(0, 0.5) μ = @. a + bA * A # what is @ mean? D ~ MvNormal(μ, σ) end . model_m5_1 (generic function with 2 methods) . 데이터와 연계시켜 봅니다. 생성된 데이터의 1~5번까지를 봐봅니다. . m5_1 = sample(model_m5_1(data.A, data.D), NUTS(), 1000) m5_1_df = DataFrame(m5_1) prior = sample(model_m5_1([0], [0]), Prior(), 1000) prior_df = DataFrame(prior) prior_df[1:5,:] # caculate mu for every prior sample on age=-2 and age=2 bounds = [-2, 2] μ = link(prior_df, [:a, :bA], bounds) μ = hcat(μ...); p = plot(xlab=&quot;Median age marriage (std)&quot;, ylab=&quot;Divorce rate (std)&quot;) for μ′ ∈ first(eachrow(μ), 50) plot!(bounds, μ′; c=:black, alpha=0.3) end display(p) . . This notebook was generated using Literate.jl. .",
            "url": "https://jundamin.github.io/Notebooks/2022/09/12/ch05_spurious_association.html",
            "relUrl": "/2022/09/12/ch05_spurious_association.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "JAX를 써봅시다",
            "content": "설치를 할 때 먼저 jaxlib을 설치하고 그 버전에 맞는 jax를 설치합니다. . ! pip install jaxlib ! pip install jax==0.3.15 . from jax import numpy as jnp from jax import grad import numpy as np from plotnine import * import pandas as pd from tqdm.notebook import tqdm . 간단한 모형을 만들어 봅니다. X와 y가 2차함수 형태로 결합된 경우를 생각해 봅니다. . n = 100 X = np.random.uniform(0, 3, size=n) y = 3 * np.power(X, 2) + np.random.normal(10, 3, size=n) data = pd.DataFrame(zip(X, y), columns=[&quot;X&quot;, &quot;y&quot;]) ( ggplot(data) + aes(&quot;X&quot;, &quot;y&quot;) + geom_point() ) . &lt;ggplot: (8762106993550)&gt; . 선형 모델을 먼저 생각해 봅니다. . w = {&quot;a&quot;: 0., &quot;b&quot;: 0.} # set model def model(w, X): return w[&quot;a&quot;] * X + w[&quot;b&quot;] # set loss def loss(w, model, X, y): return jnp.power(model(w, X) - y, 2).sum() # grad loss dloss = grad(loss) . 이제 경사하강법을 활용하여 w를 찾아봅니다. . 경사하강법은 말그대로 경사를 구해서 낮은 쪽으로 이동하게 하는 것입니다. . 기본적인 아이디어는 예측치와 관측값의 차이를 합치는 손실함수(loss function)을 구합니다. 그리고 파라미터를 손실이 줄어드는 방향(경사, 미분해서 보통 구합니다)으로 조금씩 옮겨가면서 최적의 값을 찾아 한발 한발 나아가는 방식입니다. . 수식으로 간단하게 표기해보자면 $$L( theta) = sum_i ( f(x_i; theta) - y)^2$$ 로 정의하고 이 $L$을 $ theta$로 미분해 해당 미분값(경사)를 이용해서 낮추는 방향으로 파라미터 $ theta$를 바꿔가면서 찾아가는 방식입니다. . rate = 0.0001 losses = [] ws = [] for i in tqdm(range(2000)): l = loss(w, model, X, y) ws.append(w.copy()) losses.append(l) if i % 100 == 0: print(i, &quot;loss: &quot;, l) dw = dloss(w, model, X, y) for key in w.keys(): w[key] -= dw[key]*rate . 0 loss: 51256.832 100 loss: 1503.3762 200 loss: 1503.3103 300 loss: 1503.2767 400 loss: 1503.259 500 loss: 1503.25 600 loss: 1503.2452 700 loss: 1503.2428 800 loss: 1503.2415 900 loss: 1503.2407 1000 loss: 1503.2406 1100 loss: 1503.2402 1200 loss: 1503.2402 1300 loss: 1503.24 1400 loss: 1503.24 1500 loss: 1503.24 1600 loss: 1503.24 1700 loss: 1503.24 1800 loss: 1503.24 1900 loss: 1503.24 . result_df = pd.DataFrame(zip(X, np.array(model(w, X))), columns=[&quot;X&quot;, &quot;f&quot;]) ( ggplot(data=data) + aes(&quot;X&quot;, &quot;y&quot;) + geom_point() + geom_smooth(method=&quot;lm&quot;) + geom_line(data=result_df, mapping=aes(&quot;X&quot;, &quot;f&quot;), color=&quot;#ff1234&quot;) ) . &lt;ggplot: (8762106674460)&gt; . dfs = [pd.DataFrame(zip(map(int, np.ones_like(X)*i), X, np.array(model(ws[i], X))), columns=[&quot;i&quot;, &quot;X&quot;, &quot;f&quot;]) for i in range(0, 50, 5)] df = pd.concat(dfs) . 처음에는 많이 차이나지만 점점 해석적으로 계산한 선형 회귀 값과 유사해지는 것을 볼 수 있습니다. . 이 경사하강법의 장점은 손실함수를 정의 할 수만 있다면 적용할 수 있어 유연하게 많은 곳에 적용할 수 있습니다. . p = ( ggplot(data=df) + aes(x=&quot;X&quot;, y=&quot;f&quot;) + geom_point(data=data, mapping=aes(&quot;X&quot;, &quot;y&quot;)) + geom_smooth(data=data, method=&quot;lm&quot;, mapping=aes(&quot;X&quot;, &quot;y&quot;), color=&quot;yellow&quot;) + geom_line(color=&quot;red&quot;, size=1) + facet_wrap(&quot;i&quot;) ) p . &lt;ggplot: (8762106626557)&gt; . 하나의 그래프에 겹쳐서 표현하면 아래와 같은 그래프가 됩니다. . p = (ggplot() + geom_point(data=data, mapping=aes(&quot;X&quot;, &quot;y&quot;)) + geom_smooth(data=data, method=&quot;lm&quot;, mapping=aes(&quot;X&quot;, &quot;y&quot;), color=&quot;yellow&quot;) ) for df in dfs: p += geom_line(data=df, mapping=aes(x=&quot;X&quot;, y=&quot;f&quot;, color=&quot;i&quot;)) p . &lt;ggplot: (8762106770219)&gt; . Bad pipe message: %s [b&#39; xecz x02 x84 x82m x86XAW xd5O x11 xd9T xd2 x8eH *&amp; xe0 xb7 xc4y x1bFH x86l: x0f r r[ x91 xf9Wgs xd0+/ xcf xfc xc3Z&lt;. xd0 xb6 x00 x08 x13 x02 x13 x03 x13 x01 x00 xff x01 x00 x00 x8f x00 x00 x00 x0e x00 x0c x00 x00 t127.0.0.1 x00 x0b x00 x04 x03 x00 x01 x02 x00 n x00 x0c x00 n x00 x1d x00 x17 x00 x1e x00 x19 x00&#39;] Bad pipe message: %s [b&#39;# x00 x00 x00 x16 x00 x00 x00 x17 x00 x00 x00 r x00 x1e x00 x1c x04 x03 x05 x03 x06 x03&#39;] Bad pipe message: %s [b&#39; x08 x08 x08 t x08 n x08&#39;, b&#39; x04 x08 x05 x08 x06 x04 x01 x05 x01 x06&#39;] Bad pipe message: %s [b&#34;&#39; xd0 x01]Pb xa7r x8eY xce xeb xd4 xa2v xb8 x7f xfe x00 x00| xc0, xc00 x00 xa3 x00 x9f xcc xa9 xcc xa8 xcc xaa xc0 xaf xc0 xad xc0 xa3 xc0 x9f xc0] xc0a xc0W xc0S xc0+ xc0/ x00 xa2 x00 x9e xc0 xae xc0 xac xc0 xa2 xc0 x9e xc0 xc0` xc0V xc0R xc0$ xc0( x00k x00j xc0# xc0&#39; x00g x00@ xc0 n xc0 x14 x009 x008 xc0 t xc0 x13 x003 x002 x00 x9d xc0 xa1 xc0 x9d xc0Q x00 x9c xc0 xa0 xc0 x9c xc0P x00= x00&lt; x005 x00/ x00 x9a x00 x99 xc0 x07 xc0 x11 x00 x96 x00 x05 x00 xff&#34;] Bad pipe message: %s [b&#39;&#39;] Bad pipe message: %s [b&#39;&#39;] Bad pipe message: %s [b&#39; x03 x02 x03 x04 x00- x00 x02 x01 x01 x003 x00&amp; x00$ x00 x1d x00 x14 x9al( xf3PpR x01&lt; xeao x115 x0b&#34;f xbb x1f xb1t xbb&#39;] Bad pipe message: %s [b&#39; xd2 xc1 x1e+D xa7f# x10 xc6 x06 xe0 x9e x85 x16? xe7 x00 x00 xa6 xc0, xc00 x00 xa3 x00 x9f xcc xa9 xcc xa8 xcc xaa xc0 xaf xc0 xad xc0 xa3 xc0 x9f xc0] xc0a xc0W xc0S xc0+ xc0/ x00 xa2 x00 x9e xc0&#39;, b&#34; xac xc0 xa2 xc0 x9e xc0 xc0` xc0V xc0R xc0$ xc0( x00k x00j xc0s xc0w x00 xc4 x00 xc3 xc0# xc0&#39; x00g x00@ xc0r xc0v x00 xbe x00 xbd xc0 n xc0 x14 x009 x008 x00 x88 x00 x87 xc0 t xc0 x13 x003 x002 x00 x9a x00 x99 x00E x00D xc0 x07 xc0 x11 xc0 x08 xc0 x12 x00 x16 x00 x13 x00 x9d xc0 xa1 xc0 x9d xc0Q x00 x9c xc0 xa0 xc0 x9c xc0P x00= x00 xc0 x00&lt; x00 xba x005 x00 x84 x00/ x00 x96 x00A x00 x05 x00 n x00 xff x01 x00 x00j x00 x00 x00 x0e x00 x0c x00 x00 t127.0.0.1 x00 x0b x00 x04 x03 x00 x01 x02 x00 n x00 x0c x00 n x00 x1d x00 x17 x00 x1e x00 x19 x00 x18 x00#&#34;] Bad pipe message: %s [b&#39; xe7/ xd0 x9b xc4 x98!&#39;] Bad pipe message: %s [b&#39;E xa8 x82 xba_2 x87Y x98 x00 x00&#39;] Bad pipe message: %s [b&#39; x14 xc0 n x009 x008 x007 x006 xc0 x0f xc0 x05 x005 xc0 x13 xc0 t x003 x002 x001 x000 xc0 x0e xc0 x04 x00/ x00 x9a x00 x99 x00 x98 x00 x97 x00 x96 x00 x07 xc0 x11 xc0 x07 xc0 x0c xc0 x02 x00 x05 x00 x04 x00 xff&#39;] Bad pipe message: %s [b&#34; x04h&#39; x1e x85 x8c xcdb x84m) xfd^ x02 xbb x80T xd6 x00 x00 xa2 xc0 x14 xc0 n x009 x008 x007 x006 x00 x88 x00 x87 x00 x86 x00 x85 xc0 x19 x00: x00 x89 xc0 x0f xc0 x05 x005 x00 x84 xc0 x13 xc0 t x003 x002 x001 x000 x00 x9a x00 x99 x00 x98 x00 x97 x00E x00D x00C x00B xc0 x18 x004 x00 x9b x00F xc0 x0e xc0 x04 x00/ x00 x96 x00A x00 x07 xc0 x11 xc0 x07 xc0 x16 x00 x18 xc0 x0c xc0 x02 x00 x05 x00 x04 xc0 x12 xc0 x08 x00 x16 x00 x13 x00 x10 x00 r xc0 x17 x00 x1b xc0 r xc0 x03 x00 n x00 x15 x00 x12 x00 x0f x00 x0c x00 x1a x00 t x00 x14 x00 x11 x00 x19 x00 x08 x00 x06 x00 x17 x00 x03 xc0 x10 xc0 x06 xc0 x15 xc0 x0b xc0 x01 x00 x02 x00 x01 x00 xff x02 x01 x00 x00C x00 x00 x00 x0e x00 x0c x00 x00 t127.0.0.1 x00 x0b x00 x04 x03 x00 x01 x02 x00 n x00 x1c x00 x1a x00 x17 x00 x19 x00 x1c x00&#34;] Bad pipe message: %s [b&#39; x18 x00 x1a x00 x16 x00 x0e x00 r x00 x0b x00 x0c x00 t x00 n x00# x00 x00 x00 x0f x00 x01 x01&#39;] Bad pipe message: %s [b&#39; x01 xb6 xd1 x07 x00 xcbO x95W xec xd6 x96l xf1 xc8 xc1 xfaZ x00 x00 xa2 xc0 x14 xc0 n x009 x008 x007 x006 x00 x88 x00 x87 x00 x86 x00 x85 xc0 x19 x00: x00 x89 xc0 x0f xc0 x05 x005 x00 x84 xc0 x13 xc0 t x003 x002 x001 x000 x00 x9a x00 x99 x00 x98 x00 x97 x00E x00D x00C x00B xc0 x18 x004 x00 x9b x00&#39;] Bad pipe message: %s [b&#39; x0e xc0 x04 x00/ x00 x96 x00A x00 x07 xc0 x11 xc0 x07 xc0 x16 x00 x18 xc0 x0c xc0 x02 x00 x05 x00 x04 xc0 x12 xc0 x08 x00 x16 x00 x13 x00 x10 x00 r xc0 x17 x00 x1b xc0 r xc0 x03 x00 n x00 x15 x00 x12 x00 x0f x00 x0c x00 x1a x00 t x00 x14 x00 x11 x00 x19 x00 x08&#39;] Bad pipe message: %s [b&#39; xfe&#34; x98 xab xdd xec~ x10 &#39;OD x8eAI x0b xd0; xf5 x00 x00 xa2 xc0 x14 xc0 n x009 x008 x007 x006 x00 x88 x00 x87 x00 x86 x00 x85 xc0 x19 x00: x00 x89 xc0 x0f xc0 x05 x005 x00 x84 xc0 x13 xc0 t x003 x002 x001 x000 x00 x9a x00 x99 x00 x98 x00 x97 x00E x00D x00C x00B xc0 x18 x004 x00 x9b x00F xc0 x0e xc0 x04 x00/ x00 x96 x00A x00 x07 xc0 x11&#39;] Bad pipe message: %s [b&#34;Q x95 x9f x1a x9e x13 xb9 xe6h~ x9c xa5 x80a x0b x11j x00 x00 x86 xc00 xc0, xc0( xc0$ xc0 x14 xc0 n x00 xa5 x00 xa3 x00 xa1 x00 x9f x00k x00j x00i x00h x009 x008 x007 x006 xc02 xc0. xc0* xc0&amp; xc0 x0f xc0 x05 x00 x9d x00= x005 xc0/ xc0+ xc0&#39; xc0# xc0 x13 xc0 t x00 xa4 x00 xa2 x00 xa0 x00 x9e x00g x00@ x00? x00&gt; x003 x002 x001 x000 xc01 xc0- xc0) xc0% xc0 x0e xc0 x04 x00 x9c x00&lt; x00/ x00 x9a x00 x99 x00 x98 x00 x97 x00 x96 x00 x07 xc0 x11 xc0 x07 xc0 x0c xc0 x02 x00 x05 x00 x04 x00 xff x02 x01 x00 x00g x00 x00 x00 x0e x00 x0c x00 x00 t127.0.0.1 x00 x0b x00 x04 x03 x00 x01 x02 x00 n x00 x1c x00 x1a x00 x17 x00 x19 x00 x1c x00 x1b x00 x18 x00 x1a x00 x16 x00 x0e x00 r x00 x0b x00 x0c x00 t x00 n x00# x00 x00 x00 r x00 x00 x1e x06 x01 x06 x02 x06 x03 x05 x01 x05 x02 x05 x03&#34;, b&#39; x04 x02 x04&#39;, b&#39; x01 x03&#39;, b&#39; x03&#39;, b&#39; x02&#39;, b&#39; x03&#39;] .",
            "url": "https://jundamin.github.io/Notebooks/2022/08/30/jax%EB%A1%9C-regression%EC%9D%84-%EA%B5%AC%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4.html",
            "relUrl": "/2022/08/30/jax%EB%A1%9C-regression%EC%9D%84-%EA%B5%AC%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Julia로 행성의 겉보기 역행운동을 그려보자",
            "content": "&#50669;&#54665;&#50868;&#46041;&#51060;&#46976; ? . 유튜브를 보는 도중에 행성의 겉보기 역행 운동에 대한 영상을 보았다. 행성의 역행운동이란 지구에서 보기에 행성이 반대방향으로 움직이는 것처럼 보이는 현상이다. 행성은 태양을 중심으로 돌고 있지만, 행성 간의 공전 속도의 차이로 뒤로 움직이는 듯이 보이는 현상을 말한다. . . 행성이 있고 보이는 각이 어떻게 바뀌는지를 시뮬레이션을 해보고자 하는데 줄리아에서 애니메이션을 만들 때 사용할 수 있는 Javis를 사용해서 그려보기로 한다. . &#49324;&#51204;&#51456;&#48708; . 줄리아를 설치했다고 가정한다. . 우선 패키지를 설치해야 하는데 줄리아 REPL에서 ]으로 패키지 매니저 모드로 들어간 후 add Javis를 입력하여 처리하거나 . 아래와 같이 Pkg 모듈을 불러와서 설치해야 한다. (몇 분 정도 소요 될 수 있다.) . using Pkg Pkg.add(&quot;Javis&quot;) . 패키지를 설치했으면 그다음은 패키지를 불러와야 한다. . using Javis . &#50669;&#54665;&#50868;&#46041;&#51012; &#44396;&#54616;&#44592; &#50948;&#54620; &#54632;&#49688; . 애니메이션을 만들기 위해서 아래와 같이 함수를 정의했다. . ground : 배경을 설정하는 함수이다. | object : 25 픽셀 정도 되는 원을 그리는 함수다. | path! : 경로에 점을 찍어두는 함수다. | connector : 두 점을 지나는 선을 긋는 하수다. | extender : 안쪽 행성에서 바깥쪽 행성이 어디에 보여지를 그리는 함수다. | abs : 두 Point간의 거리를 구하는 함수이다. | getpoint : 특정 지점을 지나는 백터가 원과 접하는 점을 구하는 함수다. | . function ground(args...) background(&quot;white&quot;) # canvas background sethue(&quot;black&quot;) # pen color end function object(p=O, color=&quot;black&quot;) sethue(color) circle(p, 25, :fill) return p end function path!(points, pos, color) sethue(color) push!(points, pos) # add pos to points circle.(points, 2, :fill) # draws a circle for each point using broadcasting end function connector(p1, p2, color) sethue(color) line(p1,p2, :stroke) end function extender(points, p1, p2, r, color) sethue(color) d = p2 - p1 p3 = getpoint(p2, d, r, O) line(p1, p3, :stroke) circle(p3, 2, :fill) push!(points, p3) if length(points) &gt; 200 popat!(points, 1) end circle.(points, 2, :fill) end import Base.abs function abs(p::Point, p0::Point) d = p - p0 r = sqrt(d.x^2 + d.y^2) return r end function getpoint(p, d, r, p0) λ = 0.001 rate = 0.001 new_p = p while true new_p = p + λ * d if r &lt; abs(new_p, p0) break end λ += rate end return new_p end . getpoint (generic function with 1 method) . &#44536;&#47548;&#51012; &#44536;&#47536;&#45796; . 우선 캔버스를 그린 후 붉은 행성과 파란 행성이 돌고 있다고 가정한다. . n = 1000 myvideo = Video(2000, 2000) Background(1:n, ground) path_of_red = Point[] path_of_blue = Point[] red_ball = Object(1:n, (args...)-&gt;object(O, &quot;#ff2211&quot;), Point(100,0)) act!(red_ball, Action(anim_rotate_around(24π, O))) blue_ball = Object(1:n, (args...)-&gt;object(O, &quot;#1122ff&quot;), Point(200,0)) act!(blue_ball, Action(anim_rotate_around(7π, O))) Object(1:n, (args...)-&gt;connector(pos(red_ball), pos(blue_ball), &quot;black&quot;)) Object(1:n, (args...)-&gt;path!(path_of_red, pos(red_ball), &quot;red&quot;)) Object(1:n, (args...)-&gt;path!(path_of_blue, pos(blue_ball), &quot;blue&quot;)) points = [] Object(1:n, (args...)-&gt;extender(points, pos(red_ball), pos(blue_ball), 800, &quot;#112233&quot;)) render( myvideo; pathname=&quot;ghtop_images/retrograde_motion.gif&quot; ) . Rendering frames...100%|████████████████████████████████| Time: 0:02:19 . &#34;ghtop_images/retrograde_motion.gif&#34; . 그림을 그려보면 아래와 같이 결과가 나온다. . 보면 알 수 있듯이 내행성이 외행성을 빠르게 통과할 때 행성이 뒤로 가는 것처럼 보이게 된다. . .",
            "url": "https://jundamin.github.io/Notebooks/2022/02/02/%EC%97%AD%ED%96%89%EC%9A%B4%EB%8F%99.html",
            "relUrl": "/2022/02/02/%EC%97%AD%ED%96%89%EC%9A%B4%EB%8F%99.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "오프라인에서 패키지 설치하기",
            "content": "인터넷이 연될되지 않은 상황에서 파이썬 패키지를 설치하고자 할 때 알아두어야 할 것을 정리해 보고자 한다. . 패키지를 받는다. pypi에서 whl 하나를 받을 순 있긴 한데 관련된 패키지가 없으면 결국 작동이 안된다. | pip download 형식으로 작성하면 된다. | 단 운영하고자 하는 OS에서 가동이 가능한 파일을 받아야 한다. | . | 패키지 파일을 옮긴다. 패키지 파일을 설치하고자 하는 컴퓨터로 옮겨야 한다. | 이 부분은 망분리 방식에 따라 다르기 때문에 별도로 다루진 않는다. | . | pip에서 링크 옵션을 지정해서 할 수 있다. --no-index옵션과 --find-links옵션을 쓰면 설치할 수 있다. | . | 패키지 중에서 API wrapper형식으로 된 경우 해당 소프트웨어를 설치해야 한다. altair를 쓰고자 하면 vega를 설치해야 한다. | . | 예시 . pip install --no-index --find-links {패키지가 있는 경로} {설치할 패키지} .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/23/%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "relUrl": "/2021/12/23/%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9C%BC%EB%A1%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "date": " • Dec 23, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Pycaret 사용해 보기",
            "content": "pycaret? . Pycaret은 로우코드 머신러닝 라이브러리라고 합니다. . sk-learn과 같은 머신러닝 패키지와의 가장 큰 차이점은 타깃을 하고 있는 부분이 모델이 아니라 머신러닝 프로세스라는 점입니다. . 보통 머신러닝 라이브러리는 새로운 알고리즘이나 방식을 쉽게 적용할 수 있게 만듭니다. sk-learn을 보시면 쉽게 이해할 수 있겠지만, 모델을 정의하고 데이터를 넣고 모델의 성능을 확인할 수 있습니다. . 하지만 보통 우리가 하고자 하는 것은 특정 모델을 만드는 것이 아니라 모델의 성능을 비교하고 적용하는 것입니다. . Pycaret은 바로 이 부분, 모델을 비교하고 그것을 배포하는 것을 자동화 하는 라이브러리라고 보시면 됩니다. .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/08/pycaret.html",
            "relUrl": "/2021/12/08/pycaret.html",
            "date": " • Dec 8, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages로 블로그 시작하기",
            "content": "&#49884;&#51089;&#54616;&#44172; &#46108; &#51060;&#50976; . Jupyter notebook으로 글을 쓰곤 하는데 이를 가공하지 않고 올릴 수 있는 곳을 찾고 있었다. . 그러다가 Fastpages를 알게 되어 시작하고자 한다. . &#49444;&#52824;&#54616;&#44592; . 아직 초보라서 그렇겠지만, 기존 가이드를 기반으로 하려고 한다. . &#47112;&#54252;&#51648;&#53664;&#47532; &#49373;&#49457;&#54616;&#44592; . &#53412; &#49373;&#49457;&#54616;&#44592; . 주의할 점은 merge하기 전에 키 설정을 해야 한다. 안 그러면 에러가 나더라. . SSH_DEPLOY_KEY라는 이름은 필수다. . &#51060;&#51228; &#54168;&#51060;&#51648; &#48320;&#44221;&#54616;&#44592; . 로고는 index.html 제목이란 footer에서 써있는 건 _config.yml . 아티클이랑은 _notebooks, _posts(md), _word에 yyyy-mm-dd_파일명. 형식으로 해야한다. . &#44544;&#50424; &#46412; &#52280;&#44256;&#54624; &#47564;&#54620; &#47928;&#48277; . 기본적으로는 Markdown문법을 따르는데 추가적으로 참고할 만한 것들이 있어 정리해 보고자 한다. . 여기서 참고20 했습니다. . 여기서 참고20 했습니다. . . 처럼 된다. .",
            "url": "https://jundamin.github.io/Notebooks/2021/12/07/fastpages.html",
            "relUrl": "/2021/12/07/fastpages.html",
            "date": " • Dec 7, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "이 블로그는 fastpages 1로 만들어졌습니다. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jundamin.github.io/Notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jundamin.github.io/Notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}